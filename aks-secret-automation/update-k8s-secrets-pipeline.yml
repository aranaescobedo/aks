
# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: environment
    type: string
    values:
      - test
      - prod
    default: test
  - name: secretName
    type: string
    default: istio-credentials

trigger:
- none

variables:
  agent: <AGENT_POOL_NAME>
  armServiceConnection: <ARM_SERVICE_CONNECTION>
  buildName: update-k8s-secrets-$(Build.BuildId)
  folderName: cert_temp
  kubernetesServiceConnection: <KUBERNETES_SERVICE_CONNECTION>
  workingDirectoryForCertFolder: $(Build.SourcesDirectory)/aks-secret-automation

name: ${{ variables.buildName }}

pool: $(agent)

stages:
- stage: Deploy
  displayName: Deploy ${{ parameters.environment }}
  jobs:
  - deployment: Deploy
    displayName: Deploy ${{ parameters.environment }}
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            inputs:
              azureSubscription: '${{ variables.armServiceConnection }}'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'bash create-k8s-secrets-from-keyvault.sh  ${{ parameters.environment }} ${{ parameters.secretName }}'
              workingDirectory: '${{ variables.workingDirectoryForCertFolder }}'
            displayName: Fetch secret from Key vault
          - task: Kubernetes@1
            displayName: Create secrets
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
              namespace: aks-istio-ingress
              secretType: generic
              secretArguments: --from-file=tls.key=${{ variables.folderName }}/tls.key --from-file=tls.crt=${{ variables.folderName }}/tls.crt
              secretName: ${{ parameters.secretName }}
              workingDirectory: '${{ variables.workingDirectoryForCertFolder }}'
          - script: rm -rf ${{ variables.folderName }}
            displayName: Remove folder ${{ variables.folderName }}
